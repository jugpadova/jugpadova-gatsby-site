{"version":3,"file":"component---src-templates-post-list-js-858f6dbe47b1142ba80a.js","mappings":"2JAIMA,E,QAAUC,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,uFAmDb,IAxCqB,WACnB,IAqBMC,GArBOC,EAAAA,EAAAA,gBAAe,aAqBJC,kBAAkBC,MAC1C,OACE,gBAACL,EAAD,KACE,uCACA,0BACGE,EAAWI,KAAI,SAAAC,GAAQ,OACtB,sBAAIC,IAAKD,EAASE,YAChB,gBAAC,EAAAC,KAAD,CAAMC,GAAE,sBAAwBJ,EAASE,YACtCF,EAASK,MAAM,GAAGC,YAAYX,WAAWY,MAAK,SAAAC,GAAC,OAAIA,EAAEC,YAAcT,EAASE,cAAYQ,MACnF,IAHV,IAIIV,EAASW,WAJb,Y,oFCpCJC,EAAgBlB,EAAAA,QAAAA,KAAAA,WAAH,oEAAGA,CAAH,gFASbmB,EAAenB,EAAAA,QAAAA,IAAAA,WAAH,mEAAGA,CAAH,0GAiDlB,IAtCiB,SAAC,GAA8D,IAA5DoB,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASvB,EAAuB,EAAvBA,WAAYwB,EAAW,EAAXA,KAClE,OACE,sBAAIlB,IAAKa,GACP,2BACEM,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAnB,KAAD,CAAMC,GAAIU,EAAMS,SAAS,OACvB,wBAAMA,SAAS,YAAYR,KAG/B,gBAACH,EAAD,KACE,gBAAC,IAAaI,GACd,iCACA,4BAAOC,KAGX,+BACE,qBACEO,wBAAyB,CACvBC,OAAQP,GAEVK,SAAS,iBAGb,gBAACV,EAAD,KACI,gBAAC,IAAD,CAAclB,WAAYA,IAC1B,gCACA,gBAAC,IAAD,CAASwB,KAAMA,S,6CCtDrB1B,E,QAAUC,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,MAqEb,IAnEiB,WACf,IAsBMgC,GAtBO9B,EAAAA,EAAAA,gBAAe,cAqBVC,kBAAkBC,MAEjCC,KAAI,SAAA4B,GACH,MAAO,CACLjB,KAAMiB,EAAIzB,WACV0B,QAASD,EAAItB,MAAM,GAAGC,YAAYa,KAAKZ,MACrC,SAAAsB,GAAC,OAAIA,EAAEnB,OAASiB,EAAIzB,cACpB0B,QACFjB,WAAYgB,EAAIhB,eAGnBmB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErB,WAAaoB,EAAEpB,cAChCsB,MAAM,EAAG,IACTH,MAAK,SAACC,EAAGC,GAAJ,OACJD,EAAEH,QAAQM,cAAcC,cAAcH,EAAEJ,QAAQM,kBAEpD,EAAmBR,EAChB3B,KAAI,SAAA4B,GAAG,OAAIA,EAAIhB,cACfyB,QACC,WAAqBC,GAArB,IAAEC,EAAF,KAAWC,EAAX,WAA8B,CAC5BC,KAAKC,IAAIH,EAASD,GAClBG,KAAKE,IAAIH,EAASF,MAEpB,CAACM,EAAAA,GAAWA,EAAAA,IAPTF,EAAP,KAAYC,EAAZ,KASA,OACE,gBAACjD,EAAD,KACE,iCACA,2BACGiC,EAAU3B,KAAI,SAAA4B,GAAG,OAChB,wBACE1B,IAAK0B,EAAIjB,KACTkC,MAAO,CACLC,SACE,GAAM,KAAClB,EAAIhB,WAAa8B,IAAsBC,EAAMD,GAAO,MAG/D,gBAAC,EAAAtC,KAAD,CAAMC,GAAE,iBAAmBuB,EAAIjB,MAASiB,EAAIC,SAAe,yC,qGCvDjEkB,EAAiBpD,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,uCAKdqD,EAAUrD,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,6KAsDb,UApCyB,SAAC,GAAqC,IAAD,EAAlCsD,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvCC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBtC,QAAxB,QACHuC,EAAUL,EAAKpD,kBAAtBQ,MAER,OACE,gBAAC,IAAD,CAAQ6C,SAAUA,EAAUnC,MAAOoC,GACjC,gBAAC,IAAD,CAAKpC,MAAOiC,EAAYjC,QACxB,gBAAC+B,EAAD,KACE,sBAAIF,MAAO,CAAEW,UAAU,SACpBD,EAAMvD,KAAI,SAAAyD,GACT,IAAMzC,EAAQyC,EAAKlD,YAAYS,OAASyC,EAAKC,OAAO3C,KAC9CI,EAAUsC,EAAKlD,YAAYoD,aAAeF,EAAKG,QAErD,OACE,gBAAC,IAAD,CACE1D,IAAKuD,EAAKC,OAAO3C,KACjBA,KAAM0C,EAAKC,OAAO3C,KAClBC,MAAOA,EACPC,OAAQwC,EAAKlD,YAAYU,OACzBC,KAAMuC,EAAKlD,YAAYW,KACvBC,QAASA,EACTvB,WAAY6D,EAAKlD,YAAYX,WAC7BwB,KAAMqC,EAAKlD,YAAYa,WAK/B,gBAAC4B,EAAD,KACE,gBAAC,IAAD,MACA,gBAAC,IAAD","sources":["webpack://jugpadova-gatsby-site/./src/components/category-menu.js","webpack://jugpadova-gatsby-site/./src/components/post-item.js","webpack://jugpadova-gatsby-site/./src/components/tag-cloud.js","webpack://jugpadova-gatsby-site/./src/templates/post-list.js"],"sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.nav`\n  & > ol {\n    list-style-type: none;\n  }\n\n  & > ol > li {\n    margin-bottom: 0.5em;\n    white-space: nowrap;\n  }\n`\n\nconst CategoryMenu = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 5000\n        filter: { fileAbsolutePath: { regex: \"/(/blog/)/\" } }\n      ) {\n        group(field: frontmatter___categories___permalink) {\n          fieldValue\n          totalCount\n          nodes {\n            frontmatter {\n              categories {\n                name\n                permalink\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n  const categories = data.allMarkdownRemark.group\n  return (\n    <Wrapper>\n      <h3>Categorie</h3>\n      <ol>\n        {categories.map(category => (\n          <li key={category.fieldValue}>\n            <Link to={`/articles/category/${category.fieldValue}`}>\n              {category.nodes[0].frontmatter.categories.find(c => c.permalink === category.fieldValue).name}\n            </Link>{\" \"}\n            ({category.totalCount})\n          </li>\n        ))}\n      </ol>\n    </Wrapper>\n  )\n}\n\nexport default CategoryMenu\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport Gravatar from \"../components/gravatar\"\nimport styled from \"styled-components\"\nimport CategoryList from \"./category-list\"\nimport TagList from \"./tag-list\"\n\nconst AuthorWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  font-size: 0.8em;\n  & > * {\n    margin-right: 0.5em;\n  }\n`\n\nconst LinksWrapper = styled.nav`\n  display: flex ;\n  justify-content: flex-end;\n  align-items: center;\n  margin-top: 0.5rem;\n\n  & > * {\n    margin-left: 0.5em;\n  }\n`\n\nconst PostItem = ({ slug, title, author, date, content, categories, tags }) => {\n  return (\n    <li key={slug}>\n      <article\n        className=\"post-list-item\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h2>\n            <Link to={slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{title}</span>\n            </Link>\n          </h2>\n          <AuthorWrapper>\n            <Gravatar {...author} />\n            <span>|</span>\n            <span>{date}</span>\n          </AuthorWrapper>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: content,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        <LinksWrapper>\n            <CategoryList categories={categories}/>\n            <div>|</div>\n            <TagList tags={tags}/>\n        </LinksWrapper>\n      </article>\n    </li>\n  )\n}\n\nexport default PostItem\n","import React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.nav``\n\nconst TagCloud = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 5000\n        filter: { fileAbsolutePath: { regex: \"/(/blog/)/\" } }\n      ) {\n        group(field: frontmatter___tags___name) {\n          fieldValue\n          totalCount\n          nodes {\n            frontmatter {\n              tags {\n                name\n                display\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n  const tags = data.allMarkdownRemark.group\n  const cloudTags = tags\n    .map(tag => {\n      return {\n        name: tag.fieldValue,\n        display: tag.nodes[0].frontmatter.tags.find(\n          t => t.name === tag.fieldValue\n        ).display,\n        totalCount: tag.totalCount,\n      }\n    })\n    .sort((a, b) => b.totalCount - a.totalCount)\n    .slice(0, 40)\n    .sort((a, b) =>\n      a.display.toLowerCase().localeCompare(b.display.toLowerCase())\n    )\n  const [min, max] = cloudTags\n    .map(tag => tag.totalCount)\n    .reduce(\n      ([prevMin, prevMax], curr) => [\n        Math.min(prevMin, curr),\n        Math.max(prevMax, curr),\n      ],\n      [Infinity, -Infinity]\n    )\n  return (\n    <Wrapper>\n      <h3>Tag</h3>\n      <div>\n        {cloudTags.map(tag => (\n          <span\n            key={tag.name}\n            style={{\n              fontSize:\n                66 + ((tag.totalCount - min) * (200 - 66)) / (max - min) + \"%\",\n            }}\n          >\n            <Link to={`/articles/tag/${tag.name}`}>{tag.display}</Link><span> </span>\n          </span>\n        ))}\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default TagCloud\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostItem from \"../components/post-item\"\nimport styled from \"styled-components\"\nimport CategoryMenu from \"../components/category-menu\"\nimport TagCloud from \"../components/tag-cloud\"\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  align-items: stretch;\n`\n\nconst Sidebar = styled.div`\n  font-size: 0.8rem;\n  padding-left: 1rem;\n  width: 25%;\n\n  & h3 {\n    color: #d75a20;\n    margin-top: 1rem;\n    margin-bottom: 0px;\n    font-size: 1.2em;\n  }\n\n  & ol {\n    margin-block-start: 0.5em;\n    margin-block-end: 0px;\n  }\n`\n\nconst PostListTemplate = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { nodes: posts } = data.allMarkdownRemark\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={pageContext.title} />\n      <ContentWrapper>\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n            const content = post.frontmatter.description || post.excerpt\n\n            return (\n              <PostItem\n                key={post.fields.slug}\n                slug={post.fields.slug}\n                title={title}\n                author={post.frontmatter.author}\n                date={post.frontmatter.date}\n                content={content}\n                categories={post.frontmatter.categories}\n                tags={post.frontmatter.tags}\n              />\n            )\n          })}\n        </ol>\n        <Sidebar>\n          <CategoryMenu />\n          <TagCloud />\n        </Sidebar>\n      </ContentWrapper>\n    </Layout>\n  )\n}\n\nexport default PostListTemplate\n\nexport const pageQuery = graphql`\n  query PostListByFilter($filter: MarkdownRemarkFilterInput) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: $filter\n      limit: 1000\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(fromNow: true, locale: \"it\")\n          title\n          description\n          author {\n            username\n            fullname\n            email\n          }\n          categories {\n            name\n            permalink\n          }\n          tags {\n            name\n            display\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Wrapper","styled","categories","useStaticQuery","allMarkdownRemark","group","map","category","key","fieldValue","Link","to","nodes","frontmatter","find","c","permalink","name","totalCount","AuthorWrapper","LinksWrapper","slug","title","author","date","content","tags","className","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","cloudTags","tag","display","t","sort","a","b","slice","toLowerCase","localeCompare","reduce","curr","prevMin","prevMax","Math","min","max","Infinity","style","fontSize","ContentWrapper","Sidebar","pageContext","data","location","siteTitle","site","siteMetadata","posts","listStyle","post","fields","description","excerpt"],"sourceRoot":""}