{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/articles/2006/12/06/ma-voi-le-wrappate-le-liste/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JUG Padova"}},"markdownRemark":{"id":"61d27c68-63b5-55aa-9237-cf2ffe2dd746","excerpt":"Ciao, in un progetto su cui sto lavorando sto provando un approccio che\nnon avevo mai usato in passato per le liste di oggetti java, immaginate\nche di avere una…","html":"<p>Ciao, in un progetto su cui sto lavorando sto provando un approccio che\nnon avevo mai usato in passato per le liste di oggetti java, immaginate\nche di avere una lista tipo:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;SomeObject> list = new ArrayList&lt;SomeObject>();</code></pre></div>\n</code>\n<p>Se volessi estrarre dalla lista tutti gli elementi aventi un certo campo\nvalorizzato ad un dato valore, ovvero fare un filtro, farei:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SomeObject {\n  public static List&lt;SomeObject> filterByField(List&lt;SomeObject> input, String value) {\n    // ciclo la lista input e restituisco una lista nuova con gli oggetti che hanno field=value \n  }\n}</code></pre></div>\n</code>\n<p>usato così:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;SomeObject> all = new ArrayList&lt;SomeObject>();\nList&lt;SomeObject> filtered = SomeObject.filterByField(all, \"someValue\");</code></pre></div>\n</code>\n<p>Il fatto però di avere metodi statici ‘helper’ dentro <code class=\"language-text\">SomeObject</code> per\naggiungere funzionalità ad una lista non mi piace molto… ho provato\ninvece a wrappare <code class=\"language-text\">List</code> e a spostare il metodo <code class=\"language-text\">filerByValue</code> da\n<code class=\"language-text\">SomeObject</code> alla nuova classe <code class=\"language-text\">SomeObjects</code>:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SomeObjects extends ArrayList&lt;SomeObject> {\n   public SomeObjects filterByField(String value){\n     // filtro ciclando gli elementi in this e restituisco una nuova istanza di SomeObjects\n   }\n}</code></pre></div>\n</code>\n<p>Il codice di utilizzo quindi diventa:<br>\n<code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SomeObjects all = new SomeObjects();\nSomeObjects filtered = all.filterByField(\"someValue\");</code></pre></div>\n</code>\n<p>Che mi pare molto più pulito e leggible, che ve ne pare?</p>\n<p>So che non è un gran cambiamento, ma ho un parametro in meno per ogni\n<code class=\"language-text\">filterByXXX</code> che desidero aggiungere e ogni metodo è nel posto che gli\ncompete, ovvero i medoti per filtrare una lista stanno nella lista e non\ncome metodi helper dell’oggetto contenuto.</p>\n<p>Un’altro punto dove questo approccio è utile è nei Dao che wrappano\nfunzionalità di IBatis o Hibernate, dove si trova spesso codice di\nquesto tipo per prevenire il ritorno di liste nulle:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;SomeObject> result = new ArrayList&lt;SomeObject>();\nresult.addAll( ...queryForList(\"your query\", param));\nreturn result;</code></pre></div>\n</code>\n<p>Con i wrapper possiamo scrivere un costruttore ad hoc, che prende una\nlista in input e fa <code class=\"language-text\">addAll(...)</code> solo se è diversa da <code class=\"language-text\">null</code>:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class SomeObjects extends ArrayList&lt;SomeObject> {\n\n    public SomeObjects () {}\n\n    public SomeObjects (Collection&lt;SomeObject> c) {\n       if (c!=null) addAll(c);\n    }\n}</code></pre></div>\n</code>\n<p>E il codice di utilizzo diventa magicamente:</p>\n<code>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return new SomeObjects(...queryForList(\"your query\", param));</code></pre></div>\n</code>\n<p>Fatemi sapere che ne pensate, io mi sto trovando bene con questo\napproccio.</p>\n<p><small><br>\n<a href=\"mailto:paolo.dona@seesaw.it\">Paolo Donà</a> si occupa di sviluppo web in\nJava e Ruby, sviluppo progetti su commessa e formazione/training. Potete\ncontattarlo via mail o leggere il suo blog\n<a href=\"http://blog.seesaw.it\">aziendale</a> o\n<a href=\"http://paolodona.blogspot.com\">personale</a>. <br>\n</small></p>","frontmatter":{"title":"Ma voi le wrappate le liste?","date":"06 dicembre 2006","description":null,"author":{"username":"paolo.dona","fullname":"Paolo Dona'","email":"paolo.dona@jugpadova.it"},"categories":[{"name":"Tips & Tricks","permalink":"tips-and-tricks"}],"tags":[{"name":"list","display":"list"}]}},"previous":{"fields":{"slug":"/articles/2006/11/14/jug-meeting-31/"},"frontmatter":{"title":"JUG Meeting #31"}},"next":{"fields":{"slug":"/articles/2006/12/09/un-dao-in-due-minuti/"},"frontmatter":{"title":"Un DAO in DUE minuti"}}},"pageContext":{"id":"61d27c68-63b5-55aa-9237-cf2ffe2dd746","previousPostId":"8e24aef1-c745-56ca-9fac-8f6f9bdeea6f","nextPostId":"09363768-c5e0-5828-a88d-17954bc2390b"}},
    "staticQueryHashes": ["2841359383"]}