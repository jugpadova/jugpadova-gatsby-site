{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/articles/2006/12/09/un-dao-in-due-minuti/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JUG Padova"}},"markdownRemark":{"id":"09363768-c5e0-5828-a88d-17954bc2390b","excerpt":"Parancoe è un framework Web pensato per scrivere rapidamente applicazioni Web “di tutti i giorni”, cioè applicazioni senza requisiti particolari, quelle che nel…","html":"<p><a href=\"https://parancoe.dev.java.net\">Parancoe</a> è un framework Web pensato per scrivere rapidamente applicazioni Web “di tutti i giorni”, cioè applicazioni senza requisiti particolari, quelle che nel 90% dei casi viene richiesto di sviluppare. Lo scopo quindi non è avere un framework iper-flessibile, capace di adattarsi a tutti i requisiti possibili, ma un framework che renda <em>molto</em> semplice la vita al programmatore sviluppando quel particolare tipo di applicazioni.</p>\n<p>Il suo modulo di persistenza segue la stessa filosofia e permette di ottenere in pochi minuti le classi per accedere ai dati (DAO - Data Access Object) dell’applicazione, memorizzati in un database relazionale.</p>\n<p>Ad esempio, supponiamo di avere una classe persistente <code>Person</code>, mappata sul DB mediante <a href=\"http://www.hibernate.org\">Hibernate</a>. Per ottenere il suo DAO con Parancoe è sufficiente scriverne l’interfaccia:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Dao</span><span class=\"token punctuation\">(</span>entity<span class=\"token operator\">=</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericDao</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>…e scriverne una semplice configurazione per Spring:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">parancoe:</span>dao</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>personDao<span class=\"token punctuation\">\"</span></span>\r\n    <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.parancoe.example.dao.PersonDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Già così avete ottenuto un DAO con i seguenti metodi:</p>\n<ul>\n<li><code>Long create(Person newInstance);</code></li>\n<li><code>Person read(Long id);</code></li>\n<li><code>void update(Person transientObject);</code></li>\n<li><code>void delete(Person persistentObject);</code></li>\n</ul>\n<p>Notate che non sono metodi “generici”, ma usano il tipo dell’oggetto persistente, quindi non sono necessari cast.</p>\n<p>Ma si può andare oltre. Supponiamo che abbiate bisogno di un metodo per ottenere la lista delle persone con un determinato nome e cognome. Con <a href=\"https://parancode.dev.java.net\">Parancoe</a> è sufficiente modificare l’interfaccia, aggiungendo tale metodo:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Dao</span><span class=\"token punctuation\">(</span>entity<span class=\"token operator\">=</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericDao</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByFirstNameAndLastName</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questo è tutto: non è necessario scrivere l’implementazione di tale metodo, nè modificare la configurazione del DAO.</p>\n<p>Per saperne di più leggete <a href=\"http://wiki.java.net/bin/view/Projects/ParancoePersistenceTutorial\">questo tutorial</a> nel <a href=\"http://wiki.java.net/bin/view/Projects/Parancoe\">wiki</a> del progetto.</p>\n<p>Se poi volete contribuire, anche solo per dare suggerimenti su come proseguire nello sviluppo, commentate questo articolo e visitate il sito del progetto:</p>\n<p><a href=\"http://parancoe.dev.java.net\">http://parancoe.dev.java.net</a></p>\n<p>Potete anche iscrivervi alle mailing-list del progetto:</p>\n<p><a href=\"https://parancoe.dev.java.net/servlets/ProjectMailingListList\">https://parancoe.dev.java.net/servlets/ProjectMailingListList</a></p>\n<p><em>Aggiornato 28/12/2006:</em> è cambiato il modo di configurare i bean DAO.</p>","frontmatter":{"title":"Un DAO in DUE minuti","date":"09 dicembre 2006","description":null,"author":{"username":"lucio.benfante","fullname":"Lucio Benfante","email":"lucio.benfante@jugpadova.it"},"categories":[{"name":"Software","permalink":"software"},{"name":"Programmazione","permalink":"programmazione"}],"tags":[{"name":"parancoe","display":"Parancoe"},{"name":"persistence","display":"persistence"},{"name":"framework","display":"framework"},{"name":"dao","display":"DAO"}]}},"previous":{"fields":{"slug":"/articles/2006/12/06/ma-voi-le-wrappate-le-liste/"},"frontmatter":{"title":"Ma voi le wrappate le liste?"}},"next":{"fields":{"slug":"/articles/2006/12/13/javapolis-2006/"},"frontmatter":{"title":"JavaPolis 2006"}}},"pageContext":{"id":"09363768-c5e0-5828-a88d-17954bc2390b","previousPostId":"61d27c68-63b5-55aa-9237-cf2ffe2dd746","nextPostId":"348c166a-8bb4-5627-8cc6-f11daf5141cd"}},
    "staticQueryHashes": ["2841359383"]}