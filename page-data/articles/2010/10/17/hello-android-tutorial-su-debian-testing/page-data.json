{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/articles/2010/10/17/hello-android-tutorial-su-debian-testing/",
    "result": {"data":{"site":{"siteMetadata":{"title":"JUG Padova"}},"markdownRemark":{"id":"64091660-291d-5192-b2af-03323a647872","excerpt":"Questo tutorial ha lo scopo di guidarvi passo passo nella creazione e\ninstallazione di un’applicazione (Hello Android) all’interno di un\ndispositivo Android…","html":"<p>Questo tutorial ha lo scopo di guidarvi passo passo nella creazione e\ninstallazione di un’applicazione (<em>Hello Android</em>) all’interno di un\ndispositivo Android disponendo di un PC con distribuzione Debian\nTesting.</p>\n<p>Di che cosa abbiamo bisogno:</p>\n<p>* Un IDE per sviluppare la nostra app — <strong>Eclipse</strong><br>\n* <strong>Android SDK</strong> — presso Google<br>\n* Un plugin per l’IDE (<strong>ADT</strong>) per poter creare il nostro package\n.apk<br>\n* Uno smartphone Android — <strong>Motorola Flipout</strong></p>\n<p>Intanto segnalo il fatto che si potrebbe utilizzare come IDE\n<strong>Netbeans</strong> (ne sono un utilizzatore convinto), ma il problema è che\nnei repositories Debian siamo attualmente fermi alla versione 6.0.1 che\nnon supporta l’attuale plugin <em>nbandroid</em> :-(</p>\n<p>Iniziamo a configurare la nostra distro per ottenere il risultato\ndesiderato: creare un package .apk da inviare al nostro smartphone.<br>\nh3. 1. Eclipse IDE</p>\n<p>Diamo da riga di comando:</p>\n<p><code class=\"language-text\">$ apt-get install eclipse</code></p>\n<p>e verranno installati in automatico tutti i pacchetti necessari (tra cui\n<code class=\"language-text\">eclipse-jdt eclipse-pde eclipse-platform eclipse-platform-data eclipse-plugin-cvs eclipse-rcp</code>).</p>\n<h3>2. Android SDK</h3>\n<p>Preleviamo da <a href=\"http://developer.android.com\">developer.android.com</a> il\npacchetto .tgz per la nostra piattaforma:</p>\n<p><code class=\"language-text\">$ wget http://dl.google.com/android/android-sdk_r07-linux_x86.tgz</code></p>\n<p>ed estraiamolo nella home del nostro debian user:</p>\n<p><code class=\"language-text\">$ tar xvzf android-sdk_r07-linux_x86.tgz </code></p>\n<h3>3. Android Development Tools (ADT) Plugin per Eclipse</h3>\n<p>Eclipse dà la possibilità di inserire nell’IDE un URL attraverso il\nquale trovare ed installare i plugins. In particolare per installare\nl’ADT Plugin basta avviare l’IDE e selezionare dal menu:</p>\n<p><code class=\"language-text\">Window → Preferences</code></p>\n<p>Su questa finestra:</p>\n<p>* dalla lista a sinistra apriamo la sezione <em>Install/Update</em><br>\n* selezioniamo <em>Available Software Sites</em><br>\n* clicchiamo sul bottone <em>Add</em> a destra<br>\n* inseriamo l’indirizzo dove reperire il plugin:\n<code class=\"language-text\">https://dl-ssl.google.com/android/eclipse/</code><br>\n* e infine clicchiamo su <em>OK</em></p>\n<p><a href=\"/files/androidtutorial_adt-plugin-repo.png\"><img src=\"/files/androidtutorial_adt-plugin-repo_small.png\" alt=\"\"></a></p>\n<p>Ora andiamo sul menu:</p>\n<p><code class=\"language-text\">Help → Install New Software</code></p>\n<p>Su questa finestra dal menu a tendina <em>Work with:</em> selezionate il\nrepository appena inserito. Sotto scegliete <em>Android Development Tools</em>\ne proseguite nelle successive schermate (tra queste ci sarà anche\nl’accettazione della licenza).</p>\n<p><a href=\"/files/androidtutorial_adt-plugin-select.png\"><img src=\"/files/androidtutorial_adt-plugin-select_small.png\" alt=\"\"></a></p>\n<p>A questo punto l’IDE chiede di essere riavviato.<br>\nDopo ciò, bisogna configurare il plugin in modo che sfrutti l’Android\nSDK installato al <em>punto 2</em>. Andiamo su:</p>\n<p><code class=\"language-text\">Window → Preferences</code></p>\n<p>Troveremo sulla lista a sinistra una nuova voce: <em>Android</em>.\nSelezioniamola e clicchiamo sul bottone <em>Browse</em> a destra inserendo la\nposizione dell’Android SDK del <em>punto 2</em>\n(<code class=\"language-text\">/home/stylee/android-sdk-linux_x86</code>).</p>\n<p>Se qualcosa dovesse andare storto, vi riporto il link alla <a href=\"http://developer.android.com/sdk/eclipse-adt.html\">guida\nesaustiva</a> per\nl’installazione e configurazione del plugin.</p>\n<h3>4. Configurazione dell’Android SDK tramite il tool <em>the Android SDK and AVD Manager</em></h3>\n<p>Il plugin è configurato all’interno dell’IDE. Ora dobbiamo configurare\nl’ambiente dell’ Android SDK per definire quale sarà il nostro\ndispositivo su cui svilupperemo l’applicazione. Il tool da utilizzare è\nlanciabile direttamente dall’interno di Eclipse con il bottone sul\npannello pricipale:</p>\n<p><img src=\"/files/androidtutorial_tool-bottone.png\" alt=\"\"></p>\n<p>Nel caso particolare, per produrre un package installabile sul mio\n<em>Motorola FlipOut</em>, dovrò installare le <em>API 7 per Android v2.1</em> (menu\n<em>Available Packages</em> sulla sinistra):</p>\n<p><a href=\"/files/androidtutorial_tool-add.png\"><img src=\"/files/androidtutorial_tool-add_small.png\" alt=\"\"></a></p>\n<p>Dopo le API bisogna creare un <em>Android Virtual Device</em> sul quale verrà\ntestata la nostra app (tramite emulatore). Selezioniamo la voce <em>Virtual\nDevices</em> sulla sinistra. Il mio FlipOut ha <strong>2Gb</strong> di scheda di memoria\nSD, Android <strong>2.1</strong> e risoluzione <strong>QVGA</strong>.</p>\n<p><a href=\"/files/androidtutorial_tool-avd.png\"><img src=\"/files/androidtutorial_tool-avd_small.png\" alt=\"\"></a></p>\n<h3>5. Hello Android</h3>\n<p>Creiamo un nuovo progetto con il wizard sulla barra principale di\nEclipse:</p>\n<p><img src=\"/files/androidtutorial_newandroid-bottone1.png\" alt=\"\"></p>\n<p>Compilate i vari campi a vostro piacimento, seguendo le linee guida:</p>\n<p><a href=\"/files/androidtutorial_newandroid-project.png\"><img src=\"/files/androidtutorial_newandroid-project_small.png\" alt=\"\"></a></p>\n<p>Aprite nell’editor la classe <code class=\"language-text\">it.santasoft.helloandroid.HelloAndroid</code> e\nmodificate in questo modo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package it.santasoft.helloandroid;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\npublic class HelloAndroid extends Activity {\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        TextView tv = new TextView(this);\n        tv.setText(\"Hello JUGPadova! From my Android Device\");\n        setContentView(tv);\n    }\n}</code></pre></div>\n<p>Ora che abbiamo sistemato il codice, passiamo alla compilazione premendo\nil tasto sul pannello dell’IDE</p>\n<p><code class=\"language-text\">Run → As Android Application</code></p>\n<p>Verrà compilato il nostro package e lanciato l’emulatore definito\nprecedentemente nella sezione <em>Android Virtual Devices</em>. Munitevi di\npazienza e attendete qualche minuto che l’emulatore si avvii… e\nvedrete il risultato sperato.</p>\n<p>Per maggiori informazioni e per alcuni approfondimenti sull’app\n<em>HelloAndroid</em> visitate <a href=\"http://developer.android.com/resources/tutorials/hello-world.html\">questo link su\n<code class=\"language-text\">developer.android.com</code></a></p>\n<h3>6. Installazione del package .apk sul dispositivo Android</h3>\n<p>Individuiamo il pacchetto <em>Hello Android.apk</em> all’interno\ndell’alberatura del nostro progetto compilato in Eclipse:</p>\n<p><code class=\"language-text\">Hello Android → bin → it → Hello Android.apk</code></p>\n<p>Sul nostro dispositivo Android andiamo ad installare dall’<em>Android\nMarket</em> uno dei tanti <strong>Apps Installer</strong> che ci permettono di gestire\npacchetti .apk all’interno della scheda di memoria SD esterna. Io\nutilizzo <em>appInstaller</em> di <em>Gregory House</em>.</p>\n<p>Spegniamo il nostro dispositivo Android, estraiamo la scheda di memoria,\ninseriamola sul nostro PC e trasferiamo nella directory radice il\npackage <em>Hello android.apk</em>; smontiamo la scheda, reinseriamo nel\ndispositivo e accendiamo.</p>\n<p>Per questioni di sicurezza è disabilitata di default l’opzione di poter\ninstallare applicazioni al di fuori dell’<em>Android Market</em>, perciò per il\nnostro scopo navighiamo nel menu del nostro dispositivo e abilitiamo\nl’opzione</p>\n<p><code class=\"language-text\">Impostazioni → Applicazioni → Origini Sconosciute</code></p>\n<p>Avviamo l’applicazione <em>appInstaller</em> e scegliamo il nostro package\n<em>Hello, Android</em>. E finalmente otteniamo</p>\n<p><a href=\"/files/androidtutorial_P1080967.JPG\"><img src=\"/files/androidtutorial_P1080967_small.JPG\" alt=\"\"></a></p>\n<p>Altro metodo molto veloce (testato di persona) se sul nostro Debian PC\nabbiamo installato il web server <em>apache</em> e siamo in una rete wifi\ndomestica è il seguente.</p>\n<p>* Copiamo il nostro <em>Hello Android.apk</em> sulla root del webserver Apache</p>\n<ul>\n<li><code class=\"language-text\">/var/www</code> di default\\</li>\n</ul>\n<p>* Verifichiamo quale sia l’indirizzo IP del Debian PC connesso alla\nrete wifi domestica - supponiamo <code class=\"language-text\">192.168.2.51</code><br>\n* Attiviamo il wifi sul dispositivo Android<br>\n* Apriamo il browser del nostro smartphone all’indirizzo:\n<code class=\"language-text\">http://192.168.2.51/Hello%20Android.apk</code><br>\n* Dopo che il browser ha finito di scaricare il pacchetto comparirà una\nnotifica: toccate la riga della notifica e vi verrà chiesto se volete\ninstallare il pacchetto.</p>\n<p>(il <code class=\"language-text\">%20</code> sostituisce lo spazio negli URL).</p>","frontmatter":{"title":"Hello Android Tutorial su Debian Testing","date":"17 ottobre 2010","description":null,"author":{"username":"dario.santamaria","fullname":"Dario Santamaria","email":"dario.santamaria@jugpadova.it"},"categories":[{"name":"Tips & Tricks","permalink":"tips-and-tricks"},{"name":"Programmazione","permalink":"programmazione"}],"tags":[{"name":"android","display":"android"},{"name":"eclipse","display":"Eclipse"},{"name":"debian","display":"debian"},{"name":"tutorial","display":"tutorial"}]}},"previous":{"fields":{"slug":"/articles/2010/08/07/jug-meeting-55-android-development-with-flash-platform/"},"frontmatter":{"title":"JUG Meeting#55: Android development with Flash Platform"}},"next":{"fields":{"slug":"/articles/2010/11/13/jug-meeting-56-devoxx-2010-report-selenium-test-android-grails/"},"frontmatter":{"title":"JUG meeting#56: Devoxx 2010 report, selenium test, android, Grails"}}},"pageContext":{"id":"64091660-291d-5192-b2af-03323a647872","previousPostId":"34006879-e5ba-5294-9304-a49c871f3e57","nextPostId":"d9c1a32f-0a25-5e00-8c84-ce876b808ed7"}},
    "staticQueryHashes": ["2841359383"]}